package io

var (
	// initialTileData is the range of data found at 0x8000 after the boot ROM
	// has completed.
	initialTileData = []byte{
		0xF0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xF3, 0xF3,
		0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C,
		0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0xF3, 0xF3,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0xCF,
		0x00, 0x00, 0x0F, 0x0F, 0x3F, 0x3F, 0x0F, 0x0F,
		0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x0F, 0x0F,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xF3,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF,
		0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xC3,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC,
		0xF3, 0xF3, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0x3C, 0x3C, 0xFC, 0xFC, 0xFC, 0xFC, 0x3C, 0x3C,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF,
		0x3C, 0x3C, 0x3F, 0x3F, 0x3C, 0x3C, 0x0F, 0x0F,
		0x3C, 0x3C, 0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC,
		0xFC, 0xFC, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF0, 0xF0,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF,
		0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xCF, 0xC3, 0xC3,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFC, 0xFC,
		0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
	}
	// initialTileMap is the range of data found at 0x9904 after the boot ROM
	// has completed.
	initialTileMap = []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x09, 0x0A, 0x0B, 0x0C, 0x19, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
		0x15, 0x16, 0x17, 0x18,
	}
)

// WriteHandler is a function that handles writing to a memory address.
// It should return the new value to be written back to the memory address.
type WriteHandler func(byte) byte

// SetHandler is a function that handles setting a value at a memory address.
type SetHandler func(any)

// MemoryRegion represents a region of memory on the bus. This is currently
// used to handle r/w locking on the bus.
type MemoryRegion uint8

const (
	// VRAM 0x8000-0x9FFF
	VRAM MemoryRegion = iota
	// RAM 0xA000-0xBFFF
	RAM
	// OAM 0xFE00-0xFE9F
	OAM
)

func (d MemoryRegion) BusLocks() []uint8 {
	switch d {
	case VRAM:
		return []uint8{0x8, 0x9}
	case RAM:
		return []uint8{0xA, 0xB}
	case OAM:
		return []uint8{0xF}
	}
	return nil
}
